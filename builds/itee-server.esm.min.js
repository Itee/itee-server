import e from"express";import t from"http";import o from"https";import*as s from"itee-database";import{isNull as r,isUndefined as i,isNotString as a,isEmptyString as n,isBlankString as c,isNotArray as p,isArray as l}from"itee-validators";import h from"path";
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */class u{constructor(t){this.rootPath=t.rootPath,this.applications=e(),this.router=e.Router,this.databases=new Map,this.servers=new Map,this._initApplications(t.applications),this._initDatabases(t.databases),this._initServers(t.servers)}get rootPath(){return this._rootPath}set rootPath(e){if(r(e))throw new TypeError("Root path cannot be null ! Expect a non empty string.");if(i(e))throw new TypeError("Root path cannot be undefined ! Expect a non empty string.");if(a(e))throw new TypeError(`Root path cannot be an instance of ${e.constructor.name} ! Expect a non empty string.`);if(n(e))throw new TypeError("Root path cannot be empty ! Expect a non empty string.");if(c(e))throw new TypeError("Root path cannot contain only whitespace ! Expect a non empty string.");this._rootPath=e}setRootPath(e){return this.rootPath=e,this}_initApplications(e){e.case_sensitive_routing&&this.applications.set("case sensitive routing",e.case_sensitive_routing),e.env&&this.applications.set("env",e.env),e.etag&&this.applications.set("etag",e.etag),e.jsonp_callback_name&&this.applications.set("jsonp callback name",e.jsonp_callback_name),e.jsonp_escape&&this.applications.set("json escape",e.jsonp_escape),e.jsonp_replacer&&this.applications.set("json replacer",e.jsonp_replacer),e.jsonp_spaces&&this.applications.set("json spaces",e.jsonp_spaces),e.query_parser&&this.applications.set("query parser",e.query_parser),e.strict_routing&&this.applications.set("strict routing",e.strict_routing),e.subdomain_offset&&this.applications.set("subdomain offset",e.subdomain_offset),e.trust_proxy&&this.applications.set("trust proxy",e.trust_proxy),e.views&&this.applications.set("views",e.views),e.view_cache&&this.applications.set("view cache",e.view_cache),e.view_engine&&this.applications.set("view engine",e.view_engine),e.x_powered_by&&this.applications.set("x-powered-by",e.x_powered_by),this._initMiddlewares(e.middlewares),this._initRouters(e.routers)}_initMiddlewares(e){for(let[t,o]of Object.entries(e)){if(p(o))throw new TypeError(`Invalid middlware configuration for ${t}, expecting an array of arguments to spread to middleware module, got ${o.constructor.name}`);this._initPackageMiddleware(t,o)?console.log(`Use ${t} middleware from node_modules`):this._initLocalMiddleware(t,o)?console.log(`Use ${t} middleware from local folder`):console.error(`Unable to register the middleware ${t} the package and/or local file doesn't seem to exist ! Skip it.`)}}_initPackageMiddleware(e,t){let o=!1;try{this.applications.use(require(e)(...t)),o=!0}catch(t){t.code&&"MODULE_NOT_FOUND"===t.code||(console.error(`The middleware "${e}" seems to encounter internal error.`),console.error(t))}return o}_initLocalMiddleware(e,t){let o=!1;try{const s=h.join(this.rootPath,"middlewares",e);this.applications.use(require(s)(...t)),o=!0}catch(e){console.error(e)}return o}_initRouters(e){for(let[t,o]of Object.entries(e))this._initPackageRouter(t,o)?console.log(`Use ${o} router from node_modules over base route: ${t}`):this._initLocalRouter(t,o)?console.log(`Use ${o} router from local folder over base route: ${t}`):console.error(`Unable to register the router ${o} the package and/or local file doesn't seem to exist ! Skip it.`)}_initPackageRouter(e,t){let o=!1;try{this.applications.use(e,require(t)),o=!0}catch(e){e.code&&"MODULE_NOT_FOUND"===e.code||(console.error(`The router "${name}" seems to encounter internal error.`),console.error(e))}return o}_initLocalRouter(e,t){let o=!1;try{const s=h.join(this.rootPath,"routers",t);this.applications.use(e,require(s)),o=!0}catch(e){e instanceof TypeError&&"Found non-callable @@iterator"===e.message&&console.error(`The router "${name}" seems to encounter error ! Are you using an object instead an array for router configuration ?`),console.error(e)}return o}_initDatabases(e){for(let t=0,o=e.length;t<o;t++){const o=e[t],r=o.type,i=`${o.name?o.name:"Database_"+t}`;try{const e=new s[r]({application:this.applications,router:this.router,...o});e.connect(),this.databases.set(i,e)}catch(e){console.error(`Unable to create database of type ${r} due to ${e.name}`),console.error(e.message),console.error(e.stack)}}}_initServers(e){const s=l(e)?e:[e];for(let e=0,r=s.length;e<r;e++){let r=s[e],i=null;if("https"===r.type){const e={pfx:r.pfx,passphrase:r.passphrase};i=o.createServer(e,this.applications)}else i=t.createServer(this.applications);i.name=r.name||`${r.name?r.name:"Server_"+e}`,i.maxHeadersCount=r.max_headers_count,i.timeout=r.timeout,i.type=r.type,i.host=r.host,i.port=r.port,i.env=r.env,i.listen(r.port,r.host,()=>{console.log(`${i.name} start listening on ${i.type}://${i.host}:${i.port} at ${new Date} under ${i.env} environment.`)}),this.servers.set(i.name,i)}}databaseOn(e,t,o){}serverOn(e,t,o){this.servers[e].on(t,o)}serversOn(e,t,o){for(let e in this.servers)this.serverOn(e,t,o)}start(){}stop(e){const t=this.servers.size,o=this.databases.size;let s=0,r=0;if(0!==t||0!==o)for(const[i,a]of this.servers)a.close(()=>{if(s++,console.log(`The ${i} listening on ${a.type}://${a.host}:${a.port} is shutted down.`),!(s<t))if(0!==o)for(const[t,s]of this.databases)s.close(()=>{r++,console.log(`Connection to ${t} is closed.`),r<o||e&&e()});else e&&e()});else e&&e()}closeServers(){}}export{u as TBackendManager};
//# sourceMappingURL=itee-server.esm.min.js.map

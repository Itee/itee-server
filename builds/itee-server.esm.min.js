import e from"express";import t from"http";import o from"https";import*as s from"itee-database";import{isNull as r,isUndefined as n,isNotString as i,isEmptyString as a,isBlankString as c,isNotArray as p,isFunction as l,isArray as h}from"itee-validators";import u from"path";class m{constructor(t){this.rootPath=t.rootPath,this.applications=e(),this.router=e.Router,this.databases=new Map,this.servers=new Map,this._initApplications(t.applications),this._initDatabases(t.databases),this._initServers(t.servers)}get rootPath(){return this._rootPath}set rootPath(e){if(r(e))throw new TypeError("Root path cannot be null ! Expect a non empty string.");if(n(e))throw new TypeError("Root path cannot be undefined ! Expect a non empty string.");if(i(e))throw new TypeError(`Root path cannot be an instance of ${e.constructor.name} ! Expect a non empty string.`);if(a(e))throw new TypeError("Root path cannot be empty ! Expect a non empty string.");if(c(e))throw new TypeError("Root path cannot contain only whitespace ! Expect a non empty string.");this._rootPath=e}setRootPath(e){return this.rootPath=e,this}_initApplications(e){e.case_sensitive_routing&&this.applications.set("case sensitive routing",e.case_sensitive_routing),e.env&&this.applications.set("env",e.env),e.etag&&this.applications.set("etag",e.etag),e.jsonp_callback_name&&this.applications.set("jsonp callback name",e.jsonp_callback_name),e.jsonp_escape&&this.applications.set("json escape",e.jsonp_escape),e.jsonp_replacer&&this.applications.set("json replacer",e.jsonp_replacer),e.jsonp_spaces&&this.applications.set("json spaces",e.jsonp_spaces),e.query_parser&&this.applications.set("query parser",e.query_parser),e.strict_routing&&this.applications.set("strict routing",e.strict_routing),e.subdomain_offset&&this.applications.set("subdomain offset",e.subdomain_offset),e.trust_proxy&&this.applications.set("trust proxy",e.trust_proxy),e.views&&this.applications.set("views",e.views),e.view_cache&&this.applications.set("view cache",e.view_cache),e.view_engine&&this.applications.set("view engine",e.view_engine),e.x_powered_by&&this.applications.set("x-powered-by",e.x_powered_by),this._initMiddlewares(e.middlewares),this._initRouters(e.routers)}_initMiddlewares(e){for(let t in e){if(!Object.prototype.hasOwnProperty.call(e,t))continue;const o=e[t];if(p(o))throw new TypeError(`Invalid middlware configuration, expect an array of argument to spread to middleware module, got ${o.constructor.name}`);try{this.applications.use(require(t)(...o)),console.log(`Use ${t} middleware from node_modules`)}catch(e){if(!e.code||"MODULE_NOT_FOUND"!==e.code){console.error(`The middleware "${t}" seems to encounter internal error.`),console.error(e);continue}this._initLocalMiddleware(t,o)}}}_initLocalMiddleware(e,t){try{const o=u.join(this.rootPath,"middlewares",e);this.applications.use(require(o)(...t)),console.log(`Use ${e} middleware from local folder`)}catch(t){t instanceof TypeError&&"Found non-callable @@iterator"===t.message?(console.error(`The middleware "${e}" seems to encounter internal error !`),console.error(t)):(console.error(`Unable to register the middleware ${e} the package or local file doesn't seem to exist ! Skip it.`),console.error(t))}}_initRouters(e){for(let t in e){if(!Object.prototype.hasOwnProperty.call(e,t))continue;const o=e[t],s=o.baseRoute,r=o.options;try{const e=require(t);this.applications.use(s,l(e)?e(...r):e),console.log(`Use ${t} router from node_modules over base route: ${s}`)}catch(e){if(!e.code||"MODULE_NOT_FOUND"!==e.code){console.error(`The router "${t}" seems to encounter internal error.`),console.error(e);continue}this._initLocalRouter(t,s,r)}}}_initLocalRouter(e,t,o){try{const s=u.join(this.rootPath,"routers",e),r=require(s);this.applications.use(t,l(r)?r(...o):r),console.log(`Use ${e} router from local folder over base route: ${t}`)}catch(t){t instanceof TypeError&&"Found non-callable @@iterator"===t.message?(console.error(`The router "${e}" seems to encounter internal error !`),console.error(t)):(console.error(`Unable to register the router ${e} the package or local file doesn't seem to exist ! Skip it.`),console.error(t))}}_initDatabases(e){for(let t=0,o=e.length;t<o;t++){const o=e[t],r=o.type,n=`${o.name?o.name:"Database_"+t}`;try{const e=new s[r](this.applications,this.router,o.plugins,o).connect();this.databases.set(n,e)}catch(e){console.error(`Unable to create database of type ${r} due to ${e.name}`),console.error(e.message),console.error(e.stack)}}}_initServers(e){const s=h(e)?e:[e];for(let e=0,r=s.length;e<r;e++){let r=s[e],n=null;if("https"===r.type){const e={pfx:r.pfx,passphrase:r.passphrase};n=o.createServer(e,this.applications)}else n=t.createServer(this.applications);n.name=r.name||`${r.name?r.name:"Server_"+e}`,n.maxHeadersCount=r.max_headers_count,n.timeout=r.timeout,n.type=r.type,n.host=r.host,n.port=r.port,n.env=r.env,n.listen(r.port,r.host,()=>{console.log(`${n.name} start listening on ${n.type}://${n.host}:${n.port} at ${new Date} under ${n.env} environment.`)}),this.servers.set(n.name,n)}}databaseOn(e,t,o){}serverOn(e,t){for(const[o,s]of this.servers)s.on(e,t)}start(){}stop(e){const t=this.servers.size,o=this.databases.size;let s=0,r=0;if(0!==t||0!==o)for(const[n,i]of this.servers)i.close(()=>{if(s++,console.log(`Shutdown ${n} listening on ${i.type}://${i.host}:${i.port} at ${new Date}.`),!(s<t))if(0!==o)for(const[t,s]in this.databases)s.close(()=>{r++,console.log(`Closeconnection to ${t}.`),r<o||e()});else e()});else e()}closeServers(){}}export{m as TBackendManager};
//# sourceMappingURL=itee-server.esm.min.js.map

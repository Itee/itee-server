import{isNull as e,isUndefined as t,isNotString as s,isEmptyString as r,isBlankString as o,isNotArray as i,isDefined as a,isArray as n}from"itee-validators";import{TAbstractObject as p,DefaultLogger as c}from"itee-core";import h from"express";import l from"http";import u from"https";import g from"path";
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */class d extends p{get applications(){return this._applications}set applications(e){this._applications=e}setApplications(e){return this.applications=e,this}addMiddleware(e){return this.applications.use(e),this}get router(){return this._router}set router(e){this._router=e}setRouter(e){return this.router=e,this}get databases(){return this._databases}set databases(e){this._databases=e}setDatabases(e){return this.databases=e,this}addDatabase(e,t){return this._databases.set(e,t),this}get servers(){return this._servers}set servers(e){this._servers=e}setServers(e){return this.servers=e,this}constructor(e={}){super({logger:c,...e}),this.logger=e.logger,this.rootPath=e.rootPath,this.applications=h(),this.router=h.Router,this.databases=new Map,this.servers=new Map,this.connections=[],this._initApplications(e.applications),this._initDatabases(e.databases),this._initServers(e.servers)}get rootPath(){return this._rootPath}set rootPath(i){if(e(i))throw new TypeError("Root path cannot be null ! Expect a non empty string.");if(t(i))throw new TypeError("Root path cannot be undefined ! Expect a non empty string.");if(s(i))throw new TypeError(`Root path cannot be an instance of ${i.constructor.name} ! Expect a non empty string.`);if(r(i))throw new TypeError("Root path cannot be empty ! Expect a non empty string.");if(o(i))throw new TypeError("Root path cannot contain only whitespace ! Expect a non empty string.");this._rootPath=i}setRootPath(e){return this.rootPath=e,this}_initApplications(e){e.case_sensitive_routing&&this.applications.set("case sensitive routing",e.case_sensitive_routing),e.env&&this.applications.set("env",e.env),e.etag&&this.applications.set("etag",e.etag),e.jsonp_callback_name&&this.applications.set("jsonp callback name",e.jsonp_callback_name),e.jsonp_escape&&this.applications.set("json escape",e.jsonp_escape),e.jsonp_replacer&&this.applications.set("json replacer",e.jsonp_replacer),e.jsonp_spaces&&this.applications.set("json spaces",e.jsonp_spaces),e.query_parser&&this.applications.set("query parser",e.query_parser),e.strict_routing&&this.applications.set("strict routing",e.strict_routing),e.subdomain_offset&&this.applications.set("subdomain offset",e.subdomain_offset),e.trust_proxy&&this.applications.set("trust proxy",e.trust_proxy),e.views&&this.applications.set("views",e.views),e.view_cache&&this.applications.set("view cache",e.view_cache),e.view_engine&&this.applications.set("view engine",e.view_engine),e.x_powered_by&&this.applications.set("x-powered-by",e.x_powered_by),this._initMiddlewares(e.middlewares),this._initRouters(e.routers)}_initMiddlewares(e){for(let[t,s]of Object.entries(e)){if(i(s))throw new TypeError(`Invalid middlware configuration for ${t}, expecting an array of arguments to spread to middleware module, got ${s.constructor.name}`);this._initPackageMiddleware(t,s)?this.logger.log(`Use ${t} middleware from node_modules`):this._initLocalMiddleware(t,s)?this.logger.log(`Use ${t} middleware from local folder`):this.logger.error(`Unable to register the middleware ${t} the package and/or local file doesn't seem to exist ! Skip it.`)}}_initPackageMiddleware(e,t){let s=!1;try{this.applications.use(require(e)(...t)),s=!0}catch(t){t.code&&"MODULE_NOT_FOUND"===t.code||(this.logger.error(`The middleware "${e}" seems to encounter internal error.`),this.logger.error(t))}return s}_initLocalMiddleware(e,t){let s=!1;try{const r=g.join(this.rootPath,"middlewares",e);this.applications.use(require(r)(...t)),s=!0}catch(e){this.logger.error(e)}return s}_initRouters(e){for(let[t,s]of Object.entries(e))this._initPackageRouter(t,s)?this.logger.log(`Use ${s} router from node_modules over base route: ${t}`):this._initLocalRouter(t,s)?this.logger.log(`Use ${s} router from local folder over base route: ${t}`):this.logger.error(`Unable to register the router ${s} the package and/or local file doesn't seem to exist ! Skip it.`)}_initPackageRouter(e,t){let s=!1;try{this.applications.use(e,require(t)),s=!0}catch(e){e.code&&"MODULE_NOT_FOUND"===e.code||(this.logger.error(`The router "${name}" seems to encounter internal error.`),this.logger.error(e))}return s}_initLocalRouter(e,t){let s=!1;try{const r=g.join(this.rootPath,"routers",t);this.applications.use(e,require(r)),s=!0}catch(e){e instanceof TypeError&&"Found non-callable @@iterator"===e.message&&this.logger.error(`The router "${name}" seems to encounter error ! Are you using an object instead an array for router configuration ?`),this.logger.error(e)}return s}_initDatabases(e){for(let t=0,s=e.length;t<s;t++){const s=e[t],r=s.type,o=s.from,i=`${s.name?s.name:`${r}_${t}`}`;try{let e=null;if(a(o)){e=new(require(o)[r])({application:this.applications,router:this.router,...s})}e.connect(),this.databases.set(i,e)}catch(e){this.logger.error(`Unable to create database of type ${r} due to ${e.name}`),this.logger.error(e.message),this.logger.error(e.stack)}}}_initServers(e){const t=n(e)?e:[e];for(let e=0,s=t.length;e<s;e++){let s=t[e],r=null;if("https"===s.type){const e={pfx:s.pfx,passphrase:s.passphrase};r=u.createServer(e,this.applications)}else r=l.createServer(this.applications);r.name=s.name||`${s.name?s.name:`Server_${e}`}`,r.maxHeadersCount=s.max_headers_count,r.timeout=s.timeout,r.type=s.type,r.host=s.host,r.port=s.port,r.env=s.env,r.listen(s.port,s.host,(()=>{this.logger.log(`${r.name} start listening on ${r.type}://${r.host}:${r.port} at ${new Date} under ${r.env} environment.`)})),r.on("connection",(e=>{this.connections.push(e),e.on("close",(()=>{this.connections=this.connections.filter((t=>t!==e))}))})),this.servers.set(r.name,r)}}databaseOn(e,t,s){}serverOn(e,t,s){this.servers[e].on(t,s)}serversOn(e,t,s){for(let e in this.servers)this.serverOn(e,t,s)}start(){}stop(e){const t=this.servers.size,s=this.databases.size;let r=0,o=0;if(!i()){for(const[e,t]of this.databases)t.close((()=>{o++,this.logger.log(`Connection to ${e} is closed.`),i()}));for(let e of this.connections)e.end();for(const[e,t]of this.servers)t.close((()=>{r++,this.logger.log(`The ${e} listening on ${t.type}://${t.host}:${t.port} is shutted down.`),i()}))}function i(){return!(r<t)&&(!(o<s)&&void(e&&e()))}}closeServers(){}}export{d as TBackendManager};

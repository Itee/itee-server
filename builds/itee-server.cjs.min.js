"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var express=_interopDefault(require("express")),http=_interopDefault(require("http")),https=_interopDefault(require("https")),Databases=require("itee-database"),iteeValidators=require("itee-validators"),path=_interopDefault(require("path"));class TBackendManager{constructor(e){this.rootPath=e.rootPath,this.applications=express(),this.router=express.Router,this.databases=new Map,this.servers=new Map,this._initApplications(e.applications),this._initDatabases(e.databases),this._initServers(e.servers)}get rootPath(){return this._rootPath}set rootPath(e){if(iteeValidators.isNull(e))throw new TypeError("Root path cannot be null ! Expect a non empty string.");if(iteeValidators.isUndefined(e))throw new TypeError("Root path cannot be undefined ! Expect a non empty string.");if(iteeValidators.isNotString(e))throw new TypeError(`Root path cannot be an instance of ${e.constructor.name} ! Expect a non empty string.`);if(iteeValidators.isEmptyString(e))throw new TypeError("Root path cannot be empty ! Expect a non empty string.");if(iteeValidators.isBlankString(e))throw new TypeError("Root path cannot contain only whitespace ! Expect a non empty string.");this._rootPath=e}setRootPath(e){return this.rootPath=e,this}_initApplications(e){e.case_sensitive_routing&&this.applications.set("case sensitive routing",e.case_sensitive_routing),e.env&&this.applications.set("env",e.env),e.etag&&this.applications.set("etag",e.etag),e.jsonp_callback_name&&this.applications.set("jsonp callback name",e.jsonp_callback_name),e.jsonp_escape&&this.applications.set("json escape",e.jsonp_escape),e.jsonp_replacer&&this.applications.set("json replacer",e.jsonp_replacer),e.jsonp_spaces&&this.applications.set("json spaces",e.jsonp_spaces),e.query_parser&&this.applications.set("query parser",e.query_parser),e.strict_routing&&this.applications.set("strict routing",e.strict_routing),e.subdomain_offset&&this.applications.set("subdomain offset",e.subdomain_offset),e.trust_proxy&&this.applications.set("trust proxy",e.trust_proxy),e.views&&this.applications.set("views",e.views),e.view_cache&&this.applications.set("view cache",e.view_cache),e.view_engine&&this.applications.set("view engine",e.view_engine),e.x_powered_by&&this.applications.set("x-powered-by",e.x_powered_by),this._initMiddlewares(e.middlewares),this._initRouters(e.routers)}_initMiddlewares(e){for(let[t,s]of Object.entries(e)){if(iteeValidators.isNotArray(s))throw new TypeError(`Invalid middlware configuration for ${t}, expecting an array of arguments to spread to middleware module, got ${s.constructor.name}`);this._initPackageMiddleware(t,s)?console.log(`Use ${t} middleware from node_modules`):this._initLocalMiddleware(t,s)?console.log(`Use ${t} middleware from local folder`):console.error(`Unable to register the middleware ${t} the package and/or local file doesn't seem to exist ! Skip it.`)}}_initPackageMiddleware(e,t){let s=!1;try{this.applications.use(require(e)(...t)),s=!0}catch(t){t.code&&"MODULE_NOT_FOUND"===t.code||(console.error(`The middleware "${e}" seems to encounter internal error.`),console.error(t))}return s}_initLocalMiddleware(e,t){let s=!1;try{const r=path.join(this.rootPath,"middlewares",e);this.applications.use(require(r)(...t)),s=!0}catch(e){console.error(e)}return s}_initRouters(e){for(let[t,s]of Object.entries(e))this._initPackageRouter(t,s)?console.log(`Use ${s} router from node_modules over base route: ${t}`):this._initLocalRouter(t,s)?console.log(`Use ${s} router from local folder over base route: ${t}`):console.error(`Unable to register the router ${s} the package and/or local file doesn't seem to exist ! Skip it.`)}_initPackageRouter(e,t){let s=!1;try{this.applications.use(e,require(t)),s=!0}catch(e){e.code&&"MODULE_NOT_FOUND"===e.code||(console.error(`The router "${name}" seems to encounter internal error.`),console.error(e))}return s}_initLocalRouter(e,t){let s=!1;try{const r=path.join(this.rootPath,"routers",t);this.applications.use(e,require(r)),s=!0}catch(e){e instanceof TypeError&&"Found non-callable @@iterator"===e.message&&console.error(`The router "${name}" seems to encounter error ! Are you using an object instead an array for router configuration ?`),console.error(e)}return s}_initDatabases(e){for(let t=0,s=e.length;t<s;t++){const s=e[t],r=s.type,o=`${s.name?s.name:"Database_"+t}`;try{const e=new Databases[r]({application:this.applications,router:this.router,...s});e.connect(),this.databases.set(o,e)}catch(e){console.error(`Unable to create database of type ${r} due to ${e.name}`),console.error(e.message),console.error(e.stack)}}}_initServers(e){const t=iteeValidators.isArray(e)?e:[e];for(let e=0,s=t.length;e<s;e++){let s=t[e],r=null;if("https"===s.type){const e={pfx:s.pfx,passphrase:s.passphrase};r=https.createServer(e,this.applications)}else r=http.createServer(this.applications);r.name=s.name||`${s.name?s.name:"Server_"+e}`,r.maxHeadersCount=s.max_headers_count,r.timeout=s.timeout,r.type=s.type,r.host=s.host,r.port=s.port,r.env=s.env,r.listen(s.port,s.host,()=>{console.log(`${r.name} start listening on ${r.type}://${r.host}:${r.port} at ${new Date} under ${r.env} environment.`)}),this.servers.set(r.name,r)}}databaseOn(e,t,s){}serverOn(e,t,s){this.servers[e].on(t,s)}serversOn(e,t,s){for(let e in this.servers)this.serverOn(e,t,s)}start(){}stop(e){const t=this.servers.size,s=this.databases.size;let r=0,o=0;if(0!==t||0!==s)for(const[a,i]of this.servers)i.close(()=>{if(r++,console.log(`The ${a} listening on ${i.type}://${i.host}:${i.port} is shutted down.`),!(r<t))if(0!==s)for(const[t,r]of this.databases)r.close(()=>{o++,console.log(`Connection to ${t} is closed.`),o<s||e&&e()});else e&&e()});else e&&e()}closeServers(){}}exports.TBackendManager=TBackendManager;
//# sourceMappingURL=itee-server.cjs.min.js.map
